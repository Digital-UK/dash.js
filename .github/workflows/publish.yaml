name: "Create Release & Publish Package"

# Trigger on any commit to main branch
on:
    push:
        branches: [main]

env:
    NODE_VERSION: 14.x
    CACHE_NAME: ci

jobs:
    check_ci_release:
        name: "Check if CI Release Commit"
        runs-on: ubuntu-latest
        outputs:
            is_ci_release: ${{ steps.check_commit.outputs.is_ci_release }}
        steps:
            - name: "Checkout"
              uses: actions/checkout@v2.3.4
              with:
                  fetch-depth: 0

            - name: "Check Commit Message"
              id: check_commit
              run: |
                  if [[ `git log --max-count=1 --pretty=format:"%s - %b" | grep "\[ci-release\]"` ]]; then
                    echo "::set-output name=is_ci_release::true"
                    echo "This is a CI Release"
                  else
                    echo "::set-output name=is_ci_release::false"
                    echo "This is not a CI Release, skip remaining tasks"
                  fi
    create_release:
        name: "Create Release"
        runs-on: ubuntu-latest
        needs: check_ci_release
        if: ${{ needs.check_ci_release.outputs.is_ci_release == 'true' }}
        steps:
            - name: "Checkout"
              uses: actions/checkout@v2.3.4
              with:
                  fetch-depth: 0

            - name: "Generate Release Changelog"
              id: generate_changelog
              run: |
                  # Check if there is a previous tag
                  if git describe --tags --abbrev=0 @^; then
                    # Previous tag found so use that
                    export PREV_TAG=$(git describe --tags --abbrev=0 @^)
                  else
                    # No previous tag found so get the hash of the first commit
                    export PREV_TAG=$(git rev-list --max-parents=0 HEAD)
                  fi
                  # Get all of the commits between the previous tag and new tag (HEAD) - PREV_TAG may also be the first commit if this is the first tag
                  export CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"%h (%cn) %s%n%b%n%n")
                  CHANGELOG="${CHANGELOG//'%'/'%25'}"
                  CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
                  CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
                  echo "::set-output name=changelog::$(echo "$CHANGELOG")"
                  export TAG_NAME=$(jq -r '.version' package.json)
                  echo "::set-output name=tag_name::$(echo "$TAG_NAME")"
                  echo "Previous tag: ${PREV_TAG}"
                  echo "Changelog: ${CHANGELOG}"
                  if [[ `git describe --abbrev=0 --tags | grep "\-rc"` ]]; then
                    echo "::set-output name=is_prerelease::true"
                    echo "This is a pre-release"
                  else
                    echo "::set-output name=is_prerelease::false"
                  fi
            - name: "Create Github Release"
              id: create_release
              uses: actions/create-release@v1.1.2
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ steps.generate_changelog.outputs.tag_name }}
                  release_name: ${{ steps.generate_changelog.outputs.tag_name }}
                  body: ${{ steps.generate_changelog.outputs.changelog }}
                  draft: false
                  prerelease: ${{ steps.generate_changelog.outputs.is_prerelease }}

    package:
        name: "Package & Push to GitHub Packages"
        runs-on: ubuntu-latest
        needs: create_release
        steps:
            - name: "Setup - Checkout"
              uses: actions/checkout@v2.3.4

            - name: "Setup - Use Node.js ${{ env.NODE_VERSION }}"
              uses: actions/setup-node@v2.1.5
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  registry-url: 'https://npm.pkg.github.com'

            - name: "Cache node modules"
              uses: actions/cache@v2
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-node-modules-${{ env.CACHE_NAME }}-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-modules-${{ env.CACHE_NAME }}-
            - name: "Install dependencies"
              id: install_deps
              run: npm install -g webpack webpack-cli
              
            - name: "Install dependencies"
              id: install_deps
              run: npm ci
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.ORG_GITHUB_ACTIONS_TOKEN }}

            - name: "Publish"
              run: npm publish
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}